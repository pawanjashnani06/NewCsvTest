swagger: '2.0'
info: {title: Swagger petstore, description: A sample API that demonstrates Swagger-Express-Middleware features,
  version: 1.0.0, x-ibm-name: nedbankid}
basePath: /nedbankid/v1
schemes: [https]
security:
- API Key: []
consumes: [application/json, application/json]
produces: [application/json, application/json]
x-ibm-configuration:
  enforced: true
  phase: realized
  testable: true
  externalDocs: []
  attachments: []
tags: []
definitions:
  UserDetails:
    type: object
    properties:
      UniqueUserID: {type: integer, format: int64, description: The user's unique idntification number.}
      Username: {type: string, description: The user's username}
      IdDetails: {$ref: '#/definitions/IdentificationDetails'}
      FirstName: {type: string, description: First Name'}
      Surname: {type: string, description: Last name'}
      MobileNumber: {type: string, description: Mobile Number}
      EmailAddress: {type: string, description: Email Address}
      Title: {type: string, description: Title}
      Gender: {type: string, description: Gender}
      DateOfBirth: {type: string, description: Date of Birth}
  SupportedPartners:
    type: array
    items:
      type: object
      properties:
        PartnerID: {type: integer, format: int64}
        PartnerName: {type: string}
        PartnerURL: {type: string}
        ChannelID: {type: integer, format: int64}
        MatchBaseURL: {type: string}
        CustomToken: {type: string}
        FederationID: {type: string}
  ProfileCredentials:
    type: object
    properties:
      Profile: {type: string, description: Profile number of the user}
      PIN: {type: string, description: Encrypted Pin of the user}
      Password: {type: string, description: Encrypted Password of the user}
  ProfileAliasDetails:
    type: object
    properties:
      Action:
        type: string
        enum: [Link, Delink]
      ProfileInfo: {$ref: '#/definitions/ProfileCredentials'}
      ApproveItInfo: {$ref: '#/definitions/ApproveITInfo'}
  UpdateDetails:
    type: object
    properties:
      action:
        type: string
        enum: [ChangePassword, ChangeUsername, UserUpdate]
      NewPassword: {type: string, description: 'Used for ''ChangePassword'' in conjunction
          with ''action=Change Password'', and for ''ResetPassword'' in conjunction
          with ''action=Reset Password'''}
      OldPassword: {type: string, description: Used in ChangePassword in conjunction with action=Change Password}
      NewUsername: {type: string, description: Used in 'ChangeUsername' in conjunction with 'action=Change Username'}
      Username: {type: string, description: Used in 'ResetPassword' in conjunction with 'action=Reset Password'}
      GeneralUpdateDetails: {$ref: '#/definitions/UserGeneralInfo'}
  ApproveITInfo:
    description: Used in PUT /users for action='ApproveTemporaryUser' and for action='ResetPassword'
    type: object
    properties:
      ApproveITMethod: {type: string}
      ApproveITVerificationID: {type: integer, format: int64}
      OTP: {type: integer, format: int64}
  UserGeneralInfo:
    type: object
    properties:
      FirstName: {type: string}
      Surname: {type: string}
      MobileNumber: {type: string}
      EmailAddress: {type: string}
      Title: {type: string}
      Gender: {type: string}
      EnterpriseCustomerNumber: {type: integer, format: int64}
      Password: {type: string}
      Username: {type: string}
  EnterpriseUserDetails:
    type: object
    properties:
      ProfileNumber: {type: string, format: int64, description: The user's unique customer number in Nedbank's customer information system. Maps to 'RetrieveUserDetailsRs.SecurityDetails.EnterpriseCustomerNumber'}
      IdentificationDetails: {$ref: '#/definitions/IdentificationDetails'}
  IdentificationDetails:
    type: object
    properties:
      IdNumber: {type: string, description: The identification number corresponding to the identification type. Must be used in conjunction with IDType. Maps to 'RetrieveUserDetailsRs.SecurityDetails.IdentificationDetail.IdentificationNumber'}
      IdType: {type: string, description: 'The type of the user''s identification,
          e.g. SA ID Passport, etc. Must be used in conjunction with IDNumber. Maps
          to ''RetrieveUserDetailsRs.SecurityDetails.IdentificationDetail.IdentificationType'''}
      CountryCode: {type: string, description: Used in conjunction with IDType and IDNumber in the case where the identification type is passport to indicate the country of issue for the passport. Maps to 'RetrieveUserDetailsRs.SecurityDetails.IdentificationDetail.CountryCode'}
  AddUserDetails:
    type: object
    properties:
      GeneralInfo: {$ref: '#/definitions/UserGeneralInfo'}
      IdDetails: {$ref: '#/definitions/IdentificationDetails'}
      TermsAndConditionsAccepted: {type: boolean}
  RecoverUserDetails:
    type: object
    properties:
      MobileNumber: {type: string}
      IdDetails: {$ref: '#/definitions/IdentificationDetails'}
  RecoverPasswordDetails:
    type: object
    properties:
      MobileNumber: {type: string}
      Username: {type: string}
      ApproveItInfo: {$ref: '#/definitions/ApproveITInfo'}
  ApproveUserDetails:
    type: object
    properties:
      TemporaryID: {type: integer, format: int64}
      ApproveITInfo: {$ref: '#/definitions/ApproveITInfo'}
  TemporaryUserDetails:
    type: object
    properties:
      TemporaryID: {type: integer, format: int64}
      GeneralInfo: {$ref: '#/definitions/UserGeneralInfo'}
      IdDetails: {$ref: '#/definitions/IdentificationDetails'}
      TermsAndConditionsAccepted: {type: boolean}
  NewUserDetails:
    type: object
    properties:
      TemporaryID: {type: integer, format: int64}
      SecurityInfo: {$ref: '#/definitions/SecurityInformation'}
  SecurityInformation:
    type: object
    properties:
      SecurityRequestID: {type: string}
      MobileNumber: {type: string}
  CheckUsername:
    type: object
    properties:
      username: {type: string}
  RolesList:
    type: array
    items:
      type: object
      properties:
        RoleName: {type: string}
        RoleNamespace: {type: string}
  ResponseDescription:
    type: object
    properties:
      code: {type: string}
      desription: {type: string}
      InvalidFieldsList:
        type: array
        items:
          type: object
          properties:
            invalidFieldField: {type: string}
            invalidFieldMessageField: {type: string}
  ErrorDescription:
    type: object
    properties:
      data: []
      metadata: {$ref: '#/definitions/ResponseDescription'}
  TemporaryUserInfo:
    type: object
    properties:
      TemporaryID: {type: integer, format: int64}
      MobileNumber: {type: string}
  pet:
    required: [name, type]
    properties:
      name: {type: string, minLength: 4, pattern: '^[a-zA-Z0-9- ]+$'}
      age: {type: integer}
      dob: {type: string, format: date}
      type:
        type: string
        enum: [cat, dog, bird]
      address: {$ref: '#/definitions/address'}
      vet: {$ref: '#/definitions/veterinarian'}
      tags:
        type: array
        uniqueItems: true
        items: {type: string, minLength: 1}
  veterinarian:
    required: [name]
    properties:
      name: {type: string, minLength: 1}
      address: {$ref: '#/definitions/address'}
  address:
    properties:
      street: {type: string, minLength: 1}
      city: {type: string, minLength: 1}
      state: {type: string, minLength: 2, maxLength: 2, pattern: '^[A-Z]+$'}
      zipcode: {type: integer, minimum: 10000, maximum: 99999}
securityDefinitions:
  API Key: {type: apiKey, name: X-IBM-Client-Id, in: header, description: ''}
paths:
  /users/usernames:
    post:
      description: ''
      tags: [Anonymous]
      parameters:
      - schema: {$ref: '#/definitions/CheckUsername'}
        description: The new user's information
        name: CheckUsername
        required: true
        in: body
      - {name: Authorization, type: string, required: true, in: header}
      responses:
        200:
          description: Request has been successfully executed and the information notice has been accepted. The metadata.code must be R00
          schema:
            type: object
            properties:
              data: []
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: CheckUsernameAvailability
      summary: Check if the username is available
  /users/securitystatus/{securityrequestid}:
    get:
      description: ''
      tags: [Anonymous, Secure User]
      parameters:
      - {description: '', name: Authorization, required: true, type: string, in: header}
      - {description: A unique identifier that identifies the partner, name: securityrequestid,
        format: int64, required: true, type: integer, in: path}
      responses:
        200:
          description: 'Request has been successfully executed and the information
            notice has been accepted. The metadata.code must be R00 which means user
            accepted ussd. R10 means request is still pending, R14 means fall back
            to OTP method, R15 means user rejected USSD ApproveIT, R17 means device
            unabailable/unreachable '
          schema:
            type: object
            properties:
              data: []
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: CheckSecurityApprovalStatus
      summary: Checks the status of the aproveIT verificationID
  /users:
    post:
      description: ''
      tags: [Anonymous]
      parameters:
      - schema: {$ref: '#/definitions/AddUserDetails'}
        description: The new user's information
        name: NewUser
        required: true
        in: body
      - {description: '', name: Authorization, required: true, type: string, in: header}
      responses:
        200:
          description: Request has been successfully executed and the information notice has been accepted. The metadata.code must be R00, after which you must call users/securitystatus/{securityrequestid} to poll for Approve-it status
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/NewUserDetails'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: AddUser
      summary: Add a New User
    get:
      description: ''
      tags: [Secure User]
      parameters:
      - {description: '', name: Authorization, required: true, type: string, in: header}
      responses:
        200:
          description: Request has been successfully executed and the user's details are returned. The RetrieveUserDetailsRs.ResultSet.ResultCode must be R00
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/UserDetails'}
              metadata: {$ref: '#/definitions/ResponseDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: RetrieveUsersDetails
      summary: Retrieves logged in user's details
    put:
      description: ''
      tags: [Secure User]
      parameters:
      - schema: {$ref: '#/definitions/UpdateDetails'}
        description: For descriptions on the parameters see the '/definitions/UpdateDetails' object
        name: UpdateDetails
        required: true
        in: body
      - {description: '', name: Authorization, required: true, type: string, in: header}
      responses:
        200:
          description: Request has been successfully executed and the metadata.code must be R00.
          schema:
            type: object
            properties:
              data: []
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: UpdateUser
      summary: Used for 'ChangePassword', 'ChangeUsername', 'UpdateUser'
  /users/alias/profile:
    post:
      operationId: MaintainAliasProfile
      summary: Used for link/de-link user profile alias
      parameters:
      - name: ProfileAliasDetails
        in: body
        schema: {$ref: '#/definitions/ProfileAliasDetails'}
      - {description: '', name: Authorization, required: true, type: string, in: header}
      tags: [Secure User]
      responses:
        200:
          description: Request has been successfully executed and the alias has been updated. The metadata.code must be R00.
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/SecurityInformation'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
  /users/approvals:
    post:
      description: ''
      tags: [Anonymous]
      parameters:
      - schema: {$ref: '#/definitions/ApproveUserDetails'}
        name: ApproveUser
        in: body
        description: ''
      - {description: '', name: Authorization, required: true, type: string, in: header}
      responses:
        200:
          description: 'Request has been successfully executed and the information
            notice has been accepted. The metadata.code must be R00. R10 code means
            request is still pending '
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/SecurityInformation'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: ApproveTempUser
      summary: Approves temporary user created with POST on /users
  /users/roles:
    get:
      description: ''
      tags: [Secure User, Partner Only]
      parameters:
      - {description: '', name: Authorization, required: true, type: string, in: header}
      - {name: RoleName, required: true, type: string, in: query, description: ''}
      - {name: RoleNamespace, required: false, type: string, in: query, description: ''}
      responses:
        200:
          description: Request has been successfully executed and a list of a Person's details according to the specific business context is returned
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/RolesList'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: RetrieveUserRoles
      summary: Get the Roles for a User
  /users/recoveries/password:
    post:
      description: ''
      tags: [Anonymous]
      parameters:
      - schema: {$ref: '#/definitions/RecoverPasswordDetails'}
        name: RecoverUser
        in: body
        description: ''
      - {description: '', name: Authorization, required: true, type: string, in: header}
      responses:
        200:
          description: 'Request has been successfully executed and the information
            notice has been accepted. The metadata.code must be R00. R10 means request
            is still pending '
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/SecurityInformation'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: RecoverPassword
      summary: Reset forgotten password
  /users/recoveries/username:
    post:
      description: ''
      tags: [Anonymous]
      parameters:
      - schema: {$ref: '#/definitions/RecoverUserDetails'}
        name: RecoverUser
        in: body
        description: ''
      - {description: '', name: Authorization, required: true, type: string, in: header}
      responses:
        200:
          description: 'Request has been successfully executed and the information
            notice has been accepted. The metadata.code must be R00. R10 code means
            request is still pending '
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/SecurityInformation'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: RecoverUsername
      summary: Recover forgotten username
  /partners/{partnerid}:
    get:
      description: Retrieve partner details
      tags: [Partner Only, Anonymous]
      parameters:
      - {description: '', name: Authorization, required: true, type: string, in: header}
      - {description: A unique identifier that identifies the partner, name: partnerid,
        format: int64, required: true, type: integer, in: path}
      responses:
        200:
          description: Request has been successfully executed and the information notice has been accepted. The metadata.code must be R00
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/SupportedPartners'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: RetrievePartner
      summary: Retrieve supported Partner
  /partners:
    get:
      description: ''
      tags: [Anonymous]
      parameters:
      - {description: '', name: Authorization, type: string, required: true, in: header}
      responses:
        200:
          description: Request has been successfully executed and the information notice has been accepted. The metadata.code must be R00
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/SupportedPartners'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: RetrievePartners
      summary: Retrieve supported Partners
  /users/enterprise:
    post:
      description: ''
      tags: [Anonymous]
      parameters:
      - schema: {$ref: '#/definitions/EnterpriseUserDetails'}
        name: EnterpriseUserDetails
        required: true
        in: body
        description: ''
      - {description: '', name: Authorization, required: false, type: string, in: header}
      responses:
        200:
          description: Request has been successfully executed and the user's CIS number is returned. R00 is metadata.code
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  EnterpriseCustomerNumber: {type: integer, format: int64}
              metadata: {$ref: '#/definitions/ResponseDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: CheckEnterpriseUserExists
      summary: Tests if user is known already by enterprise values such as RSA IDPassport
  /partners/partnerauthn/{partnerid}:
    get:
      description: ''
      tags: [Partner Only, Anonymous]
      parameters:
      - {description: '', name: Authorization, required: true, type: string, in: header}
      - {description: A unique identifier that identifies the partner, name: partnerid,
        format: int64, required: true, type: integer, in: path}
      responses:
        200:
          description: Request has been successfully executed and authn request is created. The metadata.code must be R00
          schema:
            type: object
            properties:
              data: []
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: RetrievePartnerAuthN
      summary: Retrieve supported Partner Authn Request
  /users/verify/profile:
    post:
      operationId: VerifyProfile
      summary: Authenticates the profile, pin and password and checks if NedbankID exists. If not a temporary ID is created with profile client details and returned.
      parameters:
      - name: ProfileAliasDetails
        in: body
        schema: {$ref: '#/definitions/ProfileCredentials'}
      tags: [Anonymous]
      responses:
        200:
          description: Request has been successfully executed and profile authenticated. The metadata.code must be R00
          schema:
            type: object
            properties:
              data: {$ref: '#/definitions/TemporaryUserInfo'}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
  /users/temporary:
    put:
      description: ''
      tags: [Anonymous]
      parameters:
      - schema: {$ref: '#/definitions/TemporaryUserDetails'}
        description: For descriptions on the parameters see the '/definitions/TemporaryUserDetails' object
        name: TemporaryUserDetails
        required: true
        in: body
      responses:
        200:
          description: Request has been successfully executed, the metadata.code must be R00.
          schema:
            type: object
            properties:
              data: []
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
      operationId: UpdateTemporaryUser
      summary: Used for update username, password and T&Cs on temporary user
  /users/renew/token:
    get:
      operationId: RenewToken
      summary: 'Checks if token in header is valid and issues a new JWT token. Note:
        the token will be issued for X number of times and the lifetime of token will
        decrease as each renewal is done. Consumer must check token claim for number
        of times that they can request a renewal.'
      parameters:
      - {description: Json web token, name: Authorization, required: true, type: string,
        in: header}
      tags: [Secure User]
      responses:
        200:
          description: Request has been successfully executed and the alias has been updated. The metadata.code must be R00.
          schema:
            type: object
            properties:
              data: {type: string}
              metadata: {$ref: '#/definitions/ErrorDescription'}
        default:
          description: Returns an error that has not been specified in the implementation. Additional information may be contained in the Error Description object
          schema: {$ref: '#/definitions/ErrorDescription'}
  /pets:
    get:
      description: Returns all pets, optionally filtered by one or more criteria
      operationId: findPets
      parameters: &id001
      - name: tags
        in: query
        description: Filters pets by one or more tags
        required: false
        type: array
        items: {type: string}
        uniqueItems: true
        collectionFormat: csv
      - name: type
        in: query
        description: Filters pets by type (dog, cat, or bird)
        required: false
        type: string
        enum: [cat, dog, bird]
      - {name: age, in: query, description: Filters pets by age, required: false,
        type: integer}
      - {name: dob, in: query, description: Filters pets by date of birth, required: false,
        type: string, format: date}
      - {name: address.city, in: query, description: Filters pets by city, required: false,
        type: string}
      - {name: address.state, in: query, description: Filters pets by state, required: false,
        type: string}
      - {name: address.zipcode, in: query, description: Filters pets by zip code,
        required: false, type: integer}
      - {name: vet.name, in: query, description: Filters pets by veterinarian name,
        required: false, type: string}
      - {name: vet.address.city, in: query, description: Filters pets by veterinarian city,
        required: false, type: string}
      - {name: vet.address.state, in: query, description: Filters pets by veterinarian state,
        required: false, type: string}
      - {name: vet.address.zipcode, in: query, description: Filters pets by veterinarian zip code,
        required: false, type: integer}
      responses:
        default:
          description: Returns the matching pets
          schema:
            type: array
            items: {$ref: '#/definitions/pet'}
          headers:
            last-modified: {type: string, description: The date/time that a pet was last modified}
    delete:
      description: Deletes all pets, optionally filtered by one or more criteria
      operationId: deletePets
      parameters: *id001
      responses:
        default:
          description: Returns the pets that were deleted
          schema:
            type: array
            items: {$ref: '#/definitions/pet'}
    post:
      description: Creates a new pet in the store
      operationId: addPet
      parameters:
      - name: pet
        in: body
        description: The pet to add to the store
        required: true
        schema: {$ref: '#/definitions/pet'}
      responses:
        201:
          description: Returns the newly-added pet
          schema: {$ref: '#/definitions/pet'}
          headers:
            Location: {type: string, description: The URL of the newly-added pet}
  /pets/{petName}:
    parameters:
    - {$ref: '#/parameters/petName'}
    get:
      description: Returns a pet by name
      operationId: findPetByName
      responses:
        default:
          description: Returns the pet data
          schema: {$ref: '#/definitions/pet'}
          headers:
            last-modified: {type: string, description: The date/time that the pet was last modified}
    delete:
      description: Deletes a single pet based on the name supplied
      operationId: deletePet
      responses:
        default:
          description: Returns the pet that was deleted
          schema: {$ref: '#/definitions/pet'}
    patch:
      description: Updates a pet by name
      parameters:
      - name: pet
        in: body
        description: The updated pet info
        required: true
        schema: {$ref: '#/definitions/pet'}
      responses:
        default:
          description: Returns the updated pet data
          schema: {$ref: '#/definitions/pet'}
  /pets/{petName}/photos:
    parameters:
    - {$ref: '#/parameters/petName'}
    post:
      description: Upload a new pet photo
      operationId: addPetPhoto
      consumes: [multipart/form-data]
      parameters:
      - {name: id, in: formData, description: The photo ID (generated automatically),
        type: integer, format: int32, minimum: 1}
      - {name: label, in: formData, description: A label for the photo, required: true,
        type: string, minLength: 1}
      - {name: description, in: formData, description: An optional description of the photo,
        type: string}
      - {name: photo, in: formData, description: The pet photo, required: true, type: file,
        minLength: 1, maxLength: 5000000}
      responses:
        default:
          description: Returns the photo information
          schema:
            properties:
              id: {type: integer, format: int32, description: The auto-generated photo ID}
              label: {type: string}
              description: {type: string}
              photo: {type: object, description: 'Information about the photo (size,
                  file name, etc.)'}
          headers:
            Location: {type: string, description: The URL of the newly-added photo}
    get:
      description: Get a list of the photos for a pet
      responses:
        200:
          description: Returns the list of photos
          schema:
            type: array
            items:
              properties:
                id: {type: integer, format: int32, description: The auto-generated photo ID}
                label: {type: string}
                description: {type: string}
                photo: {type: object, description: 'Information about the photo (size,
                    file name, etc.)'}
  /pets/{petName}/photos/{id}:
    parameters:
    - {$ref: '#/parameters/petName'}
    - {name: id, in: path, description: The ID of the photo, required: true, type: integer,
      format: int32}
    get:
      description: Gets a pet photo
      operationId: getPetPhoto
      produces: [image/jpeg, image/gif, image/png, image/bmp]
      responses:
        default:
          description: Returns the pet photo
          schema: {type: file}
    delete:
      description: Deletes a pet photo
      operationId: deletePetPhoto
      responses:
        default: {description: The photo was deleted successfully}
  /:
    get:
      produces: [text/html]
      responses:
        default:
          description: The Swagger Pet Store homepage :)
          schema:
            type: file
            default: {$ref: index.html}
x-ibm-endpoints:
- endpointUrl: https://api-e.nedsecure.co.za/nedbankext
  description: Base Gateway API Endpoint
  type: [development]
parameters:
  petName: {name: petName, in: path, description: Name of the pet, required: true,
    type: string}

